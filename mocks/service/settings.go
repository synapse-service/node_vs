// Code generated by mockery. DO NOT EDIT.

package service

import (
	mock "github.com/stretchr/testify/mock"

	settings "github.com/synapse-service/node-vs/pkg/settings"
)

// Settings is an autogenerated mock type for the Settings type
type Settings struct {
	mock.Mock
}

// Get provides a mock function with given fields:
func (_m *Settings) Get() settings.Value {
	ret := _m.Called()

	var r0 settings.Value
	if rf, ok := ret.Get(0).(func() settings.Value); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(settings.Value)
	}

	return r0
}

// OnUpdate provides a mock function with given fields: callback
func (_m *Settings) OnUpdate(callback func()) {
	_m.Called(callback)
}

// Update provides a mock function with given fields: _a0
func (_m *Settings) Update(_a0 settings.Value) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(settings.Value) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewSettings interface {
	mock.TestingT
	Cleanup(func())
}

// NewSettings creates a new instance of Settings. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSettings(t mockConstructorTestingTNewSettings) *Settings {
	mock := &Settings{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
